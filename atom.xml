<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OCT SKY</title>
  
  <subtitle>个人技术blog，努力提升自己的boy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-09T08:59:26.788Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>songqing-li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python中的装饰器</title>
    <link href="http://yoursite.com/2020/03/09/pytricks-5/"/>
    <id>http://yoursite.com/2020/03/09/pytricks-5/</id>
    <published>2020-03-09T08:57:32.000Z</published>
    <updated>2020-03-09T08:59:26.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><blockquote><h4 id="Python装饰器的应用"><a href="#Python装饰器的应用" class="headerlink" title="Python装饰器的应用"></a>Python装饰器的应用</h4><p>将通用的功能（日志，访问控制和授权，缓存等等）应用到现有的可调用对象如类或函数，同时又不会永久修改可调用对象本身。</p><h4 id="理解装饰器前要了解的函数特性"><a href="#理解装饰器前要了解的函数特性" class="headerlink" title="理解装饰器前要了解的函数特性"></a>理解装饰器前要了解的函数特性</h4><ul><li><strong>函数是对象</strong>，可以分配给变量并传递给其他函数，以及从其他函数返回；</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="function"><span class="keyword">def</span> <span class="title">text_style</span><span class="params">(text)</span>:</span></span><br><span class="line">   ...:     <span class="keyword">return</span> text.lower() + <span class="string">'!'</span></span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: text_style(<span class="string">'Hello'</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'hello!'</span></span><br><span class="line"><span class="comment">#将函数text_style赋值给变量var</span></span><br><span class="line">In [<span class="number">3</span>]: var = text_style</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: var(<span class="string">'Hello'</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'hello!'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(func)</span>:</span></span><br><span class="line">   ...:     greeting = func(<span class="string">'I like python.'</span>)</span><br><span class="line">   ...:     print(greeting)</span><br><span class="line">   ...:</span><br><span class="line"><span class="comment">#将函数text_style作为参数传递给函数greet</span></span><br><span class="line">In [<span class="number">6</span>]: greet(text_style)</span><br><span class="line">i like python.!</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><ul><li><strong>词法闭包</strong>，在函数内部也能定义函数，并且子函数可以捕获父函数的局部状态<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: <span class="function"><span class="keyword">def</span> <span class="title">get_style_func</span><span class="params">(text, volume)</span>:</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">lower_style</span><span class="params">()</span>:</span></span><br><span class="line">   ...:         <span class="keyword">return</span> text.lower() + <span class="string">'.'</span></span><br><span class="line">   ...:     <span class="function"><span class="keyword">def</span> <span class="title">upper_style</span><span class="params">()</span>:</span></span><br><span class="line">   ...:         <span class="keyword">return</span> text.upper() + <span class="string">'!'</span></span><br><span class="line">   ...:     <span class="keyword">if</span> volume &gt; <span class="number">1</span>:</span><br><span class="line">   ...:         <span class="keyword">return</span> upper_style</span><br><span class="line">   ...:     <span class="keyword">else</span>:</span><br><span class="line">   ...:         <span class="keyword">return</span> lower_style</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: get_style_func(<span class="string">'hello, upper please'</span>, <span class="number">2</span>)()</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'HELLO, UPPER PLEASE!'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: get_style_func(<span class="string">'Hello, lower please'</span>, <span class="number">0.7</span>)</span><br><span class="line">Out[<span class="number">9</span>]: &lt;function __main__.get_style_func.&lt;locals&gt;.lower_style()&gt;</span><br></pre></td></tr></table></figure>内部函数<strong>upper_style</strong>和<strong>lower_style</strong>中并没有<strong>text</strong>参数，仍然可以访问父函数<strong>get_style_func</strong>中的参数<strong>text</strong></li></ul></blockquote><h4 id="最简单的装饰器"><a href="#最简单的装饰器" class="headerlink" title="最简单的装饰器"></a>最简单的装饰器</h4><p><strong>装饰器到底为何物？</strong><br>  装饰器是用来<strong>装饰</strong>或<strong>包装</strong>另一个函数的，在被包装函数之前和之后执行一些代码。装饰器可以用来定义可重用的代码块，改变或扩展其他函数的行为，而无须永久性地修改包装函数本身。函数的行为只有在<strong>装饰</strong>后才会改变。<br>  <strong>基本术语</strong>：装饰器是可调用的，将可调用对象作为输入并返回另一个可调用对象</p><p><strong>实例</strong></p><p><strong>无实际作用的空装饰器</strong><br><strong>null_decorator</strong>函数为可调用对象，它将另一个可调用对象作为输入，但是不做修改，直接返回。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">null_decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> func</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="string">'hi, null decorator'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>var = null_decorator(greet)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>var()</span><br><span class="line"><span class="string">'hi, null decorator'</span></span><br></pre></td></tr></table></figure><br>以上是在<strong>greet</strong>上显示调用刻意设计的空装饰器<strong>null_decorator</strong>，下面使用<strong>Python</strong>的@语法修饰<strong>greet</strong>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@null_decorator</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="string">'hi, null decorator'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet()</span><br><span class="line"><span class="string">'hi, null decorator'</span></span><br></pre></td></tr></table></figure><p>其中的@<strong>null_decorator</strong>相当于先定义函数然后运行这个装饰器</p><p><strong>有实际作用的装饰器</strong><br>装饰器<strong>uppercase</strong>将被装饰函数的返回结果转换成大写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">uppercase</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>            original_result = func()</span><br><span class="line"><span class="meta">... </span>            modified_result = original_result.upper()</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> modified_result</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>实际调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@uppercase</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="string">'hello, uppercase?'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet()</span><br><span class="line"><span class="string">'HELLO, UPPERCASE?'</span></span><br></pre></td></tr></table></figure><br>如下可以看到，与<strong>null_decorator</strong>不同，<strong>uppercase</strong>装饰器在装饰函数时会返回一个不同的函数对象，只有这样装饰器才能修改被装饰函数在调用时的行为。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet</span><br><span class="line">&lt;function uppercase.&lt;locals&gt;.wrapper at <span class="number">0x03894B28</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>null_decorator(greet)</span><br><span class="line">&lt;function uppercase.&lt;locals&gt;.wrapper at <span class="number">0x03894B28</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>uppercase(greet)</span><br><span class="line">&lt;function uppercase.&lt;locals&gt;.wrapper at <span class="number">0x03894AE0</span>&gt;</span><br></pre></td></tr></table></figure></p><h4 id="多个装饰器应用于同一个函数"><a href="#多个装饰器应用于同一个函数" class="headerlink" title="多个装饰器应用于同一个函数"></a><strong>多个装饰器应用于同一个函数</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">strong</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="string">'&lt;strong&gt;'</span> + func() + <span class="string">'&lt;strong&gt;'</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">emphasis</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> <span class="string">'&lt;em&gt;'</span> + func() + <span class="string">'&lt;em&gt;'</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@strong</span><br><span class="line"><span class="meta">... </span>@emphasis</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="string">'two decorator'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet()</span><br><span class="line"><span class="string">'&lt;strong&gt;&lt;em&gt;two decorator&lt;em&gt;&lt;strong&gt;'</span></span><br></pre></td></tr></table></figure><p>可以看出多个装饰器的调用顺序为从下向上</p><h4 id="装饰接受参数的函数"><a href="#装饰接受参数的函数" class="headerlink" title="装饰接受参数的函数"></a>装饰接受参数的函数</h4><p>编写函数执行时会记录函数参数和结果的<strong>trace</strong>装饰器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trace</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">print(<span class="string">f'Trace: calling <span class="subst">&#123;func.__name__&#125;</span>()'</span></span><br><span class="line"><span class="string">f'with <span class="subst">&#123;args&#125;</span>, <span class="subst">&#123;kwargs&#125;</span>'</span>)</span><br><span class="line">original_result = func(*args, **kwargs)</span><br><span class="line">print(<span class="string">f'Trace: <span class="subst">&#123;func.__name__&#125;</span>()'</span></span><br><span class="line"><span class="string">f'returned <span class="subst">&#123;original_result!r&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">return</span> original_result</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@trace</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(name, line)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;line&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>speak(<span class="string">'Torres'</span>, <span class="string">'How are you?'</span>)</span><br><span class="line">Trace: calling speak()<span class="keyword">with</span> (<span class="string">'Torres'</span>, <span class="string">'How are you?'</span>), &#123;&#125;</span><br><span class="line">Trace: speak()returned <span class="string">'Torres: How are you?'</span></span><br></pre></td></tr></table></figure></p><h4 id="编写可调试的装饰器"><a href="#编写可调试的装饰器" class="headerlink" title="编写可调试的装饰器"></a>编写可调试的装饰器</h4><p><strong>问题？</strong><br>在使用装饰器时，实际上是用一个函数替换另一个函数，这个过程的缺点是隐藏了（未装饰）原函数附带的元数据，这增加了调试程序的难度。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">""" Return a friendly greeting"""</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="string">'Hello'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decorated_greet = uppercase(greet)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet.__name__</span><br><span class="line"><span class="string">'greet'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet.__doc__</span><br><span class="line"><span class="string">' Return a friendly greeting'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decorated_greet.__name__</span><br><span class="line"><span class="string">'wrapper'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decorated_greet.__doc__</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><br><strong>解决方法</strong><br>在自己的装饰器中使用Python标准库中的<strong>functools.wraps</strong>装饰器能够将丢失的元数据从被装饰的函数复制到装饰器闭包中。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">uppercase</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @functools.wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> func.upper()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@uppercase</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""Return a friendly greeting"""</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="string">'hello'</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet.__name__</span><br><span class="line"><span class="string">'greet'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>greet.__doc__</span><br><span class="line"><span class="string">'Return a friendly greeting'</span></span><br></pre></td></tr></table></figure><br>自己编写的装饰器最好都使用<strong>functools.wraps</strong>，这不会占用太多的时间，又可以降低调试程序的难度。</p><hr><p><strong>参考书籍：Python Tricks</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h2&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;Python装饰器的应用&quot;&gt;&lt;a href=&quot;#Python装饰器的应用&quot; class=&quot;headerlink&quot; title=&quot;Python装饰器的应用&quot;&gt;&lt;/a&gt;Python装饰器的应用&lt;/h4&gt;&lt;p&gt;将通用的功能（日志，访问控制和授权，缓存等等）应用到现有的可调用对象如类或函数，同时又不会永久修改可调用对象本身。&lt;/p&gt;
&lt;h4 id=&quot;理解装饰器前要了解的函数特性&quot;&gt;&lt;a href=&quot;#理解装饰器前要了解的函数特性&quot; class=&quot;headerlink&quot; title=&quot;理解装饰器前要了解的函数特性&quot;&gt;&lt;/a&gt;理解装饰器前要了解的函数特性&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;函数是对象&lt;/strong&gt;，可以分配给变量并传递给其他函数，以及从其他函数返回；&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;text_style&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(text)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; text.lower() + &lt;span class=&quot;string&quot;&gt;&#39;!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]: text_style(&lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]: &lt;span class=&quot;string&quot;&gt;&#39;hello!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#将函数text_style赋值给变量var&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]: var = text_style&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]: var(&lt;span class=&quot;string&quot;&gt;&#39;Hello&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]: &lt;span class=&quot;string&quot;&gt;&#39;hello!&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:     greeting = func(&lt;span class=&quot;string&quot;&gt;&#39;I like python.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:     print(greeting)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#将函数text_style作为参数传递给函数greet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]: greet(text_style)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i like python.!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python tricks" scheme="http://yoursite.com/categories/python-tricks/"/>
    
      <category term="python进阶" scheme="http://yoursite.com/categories/python-tricks/python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="python中的装饰器" scheme="http://yoursite.com/tags/python%E4%B8%AD%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>python中的生成器</title>
    <link href="http://yoursite.com/2020/03/09/pytricks-4/"/>
    <id>http://yoursite.com/2020/03/09/pytricks-4/</id>
    <published>2020-03-09T08:55:24.000Z</published>
    <updated>2020-03-09T08:57:15.665Z</updated>
    
    <content type="html"><![CDATA[<h4 id="生成器是什么？"><a href="#生成器是什么？" class="headerlink" title="生成器是什么？"></a>生成器是什么？</h4><blockquote><p><strong>生成器是简化版的迭代器</strong>。生成器函数是一种语法糖，用于编写支持迭代器协议的对象。与编写基于类的迭代器相比，生成器能抽象出许多样板代码。</p></blockquote><p><strong>迭代器相关内容</strong>：<a href="https://blog.csdn.net/sinat_43113415/article/details/103250371" target="_blank" rel="noopener">python中的迭代器</a></p><h4 id="生成器函数"><a href="#生成器函数" class="headerlink" title="生成器函数"></a>生成器函数</h4><p><strong>无限生成器</strong></p><blockquote><p><strong>基于类的无限循环的迭代器</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Repeater</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br></pre></td></tr></table></figure><br><a id="more"></a><br>重写为生成器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeater</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> value <span class="comment">#yield语句用来暂时中止执行生成器函数并传回值</span></span><br></pre></td></tr></table></figure><br>无限迭代情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="keyword">for</span> x <span class="keyword">in</span> repeater(<span class="string">'Hello'</span>):</span><br><span class="line">   ...:     print(x)</span><br><span class="line">   ...:</span><br><span class="line">Hello</span><br><span class="line">Hello</span><br><span class="line">Hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br>调用生成器函数不会运行该函数，仅仅创建并返回一个生成器对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: repeater(<span class="string">'Hi'</span>)</span><br><span class="line">Out[<span class="number">3</span>]: &lt;generator object repeater at <span class="number">0x0517CEA0</span>&gt;</span><br></pre></td></tr></table></figure><br>对生成器对象调用next()时才会执行生成器函数中的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: iterator = repeater(<span class="string">'Hi'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: next(iterator)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'Hi'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: next(iterator)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">'Hi'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: next(iterator)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'Hi'</span></span><br></pre></td></tr></table></figure><br><strong>可以停下来的生成器</strong><br>非无限迭代的类<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundedRepeater</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, max_repeats)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.max_repeats = max_repeats</span><br><span class="line">        self.cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.cnt &gt;= self.max_repeats:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br></pre></td></tr></table></figure><br>重写为生成器函数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bounded_repeater</span><span class="params">(value, max_repeats)</span>:</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> cnt &gt;= max_repeats:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> value</span><br></pre></td></tr></table></figure><p>运行情况<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: <span class="keyword">for</span> x <span class="keyword">in</span> bounded_repeater(<span class="string">'Hi'</span>,<span class="number">3</span>):</span><br><span class="line">   ...:     print(x)</span><br><span class="line">   ...:</span><br><span class="line">Hi</span><br><span class="line">Hi</span><br><span class="line">Hi</span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]:</span><br></pre></td></tr></table></figure><br>简化版生成器函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bounded_repeater</span><span class="params">(value, max_repeats)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(max_repeats):</span><br><span class="line">        <span class="keyword">yield</span> value</span><br></pre></td></tr></table></figure></p><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><blockquote><p><strong>生成器表达式与列表解析式</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: listexpr = [<span class="string">'hi'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)] <span class="comment">#列表解析式</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: genexpr = (<span class="string">'hi'</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)) <span class="comment">#生成器表达式</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: listexpr</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'hi'</span>, <span class="string">'hi'</span>, <span class="string">'hi'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: genexpr</span><br><span class="line">Out[<span class="number">4</span>]: &lt;generator object &lt;genexpr&gt; at <span class="number">0x05062510</span>&gt;</span><br><span class="line"><span class="comment">#调用next()</span></span><br><span class="line">In [<span class="number">5</span>]: next(genexpr)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'hi'</span></span><br><span class="line">In [<span class="number">6</span>]: next(genexpr)</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">'hi'</span></span><br><span class="line">In [<span class="number">7</span>]: next(genexpr)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'hi'</span></span><br><span class="line">In [<span class="number">8</span>]: next(genexpr)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">StopIteration                             Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-8</span>-b44198bbd1d7&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 next(genexpr)</span><br><span class="line"></span><br><span class="line">StopIteration:</span><br></pre></td></tr></table></figure><br>生成器表达式一经使用就不能重新启动或重新使用，适合实现简单的实时迭代器。</p><p>过滤值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>even_squares = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> even_squares:</span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">36</span></span><br><span class="line"><span class="number">64</span></span><br></pre></td></tr></table></figure></p><h4 id="迭代器链"><a href="#迭代器链" class="headerlink" title="迭代器链"></a>迭代器链</h4><p>数据管道或生成器链<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="function"><span class="keyword">def</span> <span class="title">integers</span><span class="params">()</span>:</span></span><br><span class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">9</span>):</span><br><span class="line">   ...:         <span class="keyword">yield</span> i</span><br><span class="line">   ...:</span><br><span class="line">   ...: <span class="function"><span class="keyword">def</span> <span class="title">squares</span><span class="params">(seq)</span>:</span></span><br><span class="line">   ...:     <span class="keyword">for</span> i <span class="keyword">in</span> seq:</span><br><span class="line">   ...:         <span class="keyword">yield</span> i * i</span><br><span class="line">   ...:</span><br><span class="line">   ...: chain = squares(integers())</span><br><span class="line">   ...: list(chain)</span><br><span class="line">Out[<span class="number">1</span>]: [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>]</span><br></pre></td></tr></table></figure><br>生成器可以链接在一起形成高效且可维护的数据处理管道。互相链接的生成器会逐个处理在链中通过的每个元素。</p></blockquote><hr><p><strong>参考书籍：Python Tricks</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;生成器是什么？&quot;&gt;&lt;a href=&quot;#生成器是什么？&quot; class=&quot;headerlink&quot; title=&quot;生成器是什么？&quot;&gt;&lt;/a&gt;生成器是什么？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;生成器是简化版的迭代器&lt;/strong&gt;。生成器函数是一种语法糖，用于编写支持迭代器协议的对象。与编写基于类的迭代器相比，生成器能抽象出许多样板代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;迭代器相关内容&lt;/strong&gt;：&lt;a href=&quot;https://blog.csdn.net/sinat_43113415/article/details/103250371&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python中的迭代器&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;生成器函数&quot;&gt;&lt;a href=&quot;#生成器函数&quot; class=&quot;headerlink&quot; title=&quot;生成器函数&quot;&gt;&lt;/a&gt;生成器函数&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;无限生成器&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基于类的无限循环的迭代器&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Repeater&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, value)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.value = value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="python tricks" scheme="http://yoursite.com/categories/python-tricks/"/>
    
      <category term="python进阶" scheme="http://yoursite.com/categories/python-tricks/python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="python中的生成器" scheme="http://yoursite.com/tags/python%E4%B8%AD%E7%9A%84%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>python中的迭代器</title>
    <link href="http://yoursite.com/2020/03/09/pytricks-3/"/>
    <id>http://yoursite.com/2020/03/09/pytricks-3/</id>
    <published>2020-03-09T08:52:41.000Z</published>
    <updated>2020-03-09T08:54:39.143Z</updated>
    
    <content type="html"><![CDATA[<h4 id="优雅的for-in循环内部如何工作？"><a href="#优雅的for-in循环内部如何工作？" class="headerlink" title="优雅的for-in循环内部如何工作？"></a>优雅的<strong>for-in</strong>循环内部如何工作？</h4><blockquote><p>在Python中使用迭代器协议，只要对象支持<strong>iter</strong>和<strong>next</strong>双下划线方法，就能使用for-in循环</p></blockquote><h4 id="编写支持迭代器协议的Python类"><a href="#编写支持迭代器协议的Python类" class="headerlink" title="编写支持迭代器协议的Python类"></a>编写支持迭代器协议的Python类</h4><p><strong>无限迭代</strong><br>实现一个可以通过<strong>for-in</strong>循环迭代的类<strong>Repeater</strong><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Repeater</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        </span><br><span class="line"><span class="comment">#包含__iter__双下划线方法，创建并返回RepeaterIterator对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> RepeaterIterator(self)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RepeaterIterator</span>:</span></span><br><span class="line"><span class="comment">#持有迭代的源（source）对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, source)</span>:</span></span><br><span class="line">        self.source = source</span><br><span class="line">        </span><br><span class="line"><span class="comment">#回到源Repeater实例并返回与其关联的值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.source.value</span><br><span class="line"></span><br><span class="line">repeater = Repeater(<span class="string">'Hello world'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> repeater:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><br>无限迭代结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hello world</span><br><span class="line">Hello world</span><br><span class="line">Hello world</span><br><span class="line">Hello world</span><br><span class="line">Hello world</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br><strong>for-in循环在Python中的工作原理</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: repeater = Repeater(<span class="string">'Hello world'</span>)</span><br><span class="line">   ...: <span class="keyword">for</span> item <span class="keyword">in</span> repeater:</span><br><span class="line">   ...:     print(item)</span><br><span class="line">   </span><br><span class="line"><span class="comment">#上下两段代码功能相同</span></span><br><span class="line">In [<span class="number">4</span>]: repeater = Repeater(<span class="string">'Hello world'</span>)</span><br><span class="line"><span class="comment">#调用__iter__方法来返回实际的迭代器对象</span></span><br><span class="line">In [<span class="number">5</span>]: iterator = repeater.__iter__()</span><br><span class="line"><span class="comment">#循环反复调用迭代器对象的__next__方法获取值</span></span><br><span class="line">In [<span class="number">6</span>]: <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   ...:     item = iterator.__next__()</span><br><span class="line">   ...:     print(item)</span><br><span class="line">   ...:</span><br></pre></td></tr></table></figure><br>Python内置函数iter()和next()替换<strong>iter</strong>和<strong>next</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: repeater = Repeater(<span class="string">'Hello world'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: iterator = iter(repeater)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: next(iterator)</span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'Hello world'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: next(iterator)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="string">'Hello world'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: next(iterator)</span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">'Hello world'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这些内置函数在内部会调用相同的双下划线方法，为迭代器协议提供一个简洁的封装</p><p><strong>简化的迭代器类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Repeater</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line">repeater = Repeater(<span class="string">'Hello world'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> repeater:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><p>简化的类与之前定义的类功能相同，只不过刚开始理解迭代器难度较大</p><p><strong>不想无限迭代</strong></p><p>其他Python迭代器解决此问题的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>eg_list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>iterator = iter(eg_list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(iterator)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(iterator)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(iterator)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(iterator)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><p>引发了<strong>StopIteration</strong>异常</p><p><strong>非无限迭代的类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundedRepeater</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, max_repeats)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.max_repeats = max_repeats</span><br><span class="line">        self.cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.cnt &gt;= self.max_repeats:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br></pre></td></tr></table></figure><p>非无限迭代运行结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: repeater = BoundedRepeater(<span class="string">'Hello world'</span>, <span class="number">2</span>)</span><br><span class="line">   ...: <span class="keyword">for</span> item <span class="keyword">in</span> repeater:</span><br><span class="line">   ...:     print(item)</span><br><span class="line">   ...:</span><br><span class="line">Hello world</span><br><span class="line">Hello world</span><br><span class="line">In [<span class="number">3</span>]:</span><br></pre></td></tr></table></figure><br>重写上一个for-in循环，移除一些语法糖<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">3</span>]: repeater = BoundedRepeater(<span class="string">'Hello world'</span>, <span class="number">2</span>)</span><br><span class="line">   ...: iterator = iter(repeater)</span><br><span class="line">   ...: <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   ...:     <span class="keyword">try</span>:</span><br><span class="line">   ...:         item = next(iterator)</span><br><span class="line">   ...:     <span class="keyword">except</span> StopIteration:</span><br><span class="line">   ...:         <span class="keyword">break</span></span><br><span class="line">   ...:     print(item)</span><br><span class="line">   ...:</span><br><span class="line">Hello world</span><br><span class="line">Hello world</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]:</span><br></pre></td></tr></table></figure><br>用<strong>for-in</strong>循环替换<strong>while</strong>循环是个不错的主意，从另一方面也看出了Python迭代器的强大之处</p><hr><p><strong>参考书籍：Python Tricks</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;优雅的for-in循环内部如何工作？&quot;&gt;&lt;a href=&quot;#优雅的for-in循环内部如何工作？&quot; class=&quot;headerlink&quot; title=&quot;优雅的for-in循环内部如何工作？&quot;&gt;&lt;/a&gt;优雅的&lt;strong&gt;for-in&lt;/strong&gt;循环内部如何工作？&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在Python中使用迭代器协议，只要对象支持&lt;strong&gt;iter&lt;/strong&gt;和&lt;strong&gt;next&lt;/strong&gt;双下划线方法，就能使用for-in循环&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;编写支持迭代器协议的Python类&quot;&gt;&lt;a href=&quot;#编写支持迭代器协议的Python类&quot; class=&quot;headerlink&quot; title=&quot;编写支持迭代器协议的Python类&quot;&gt;&lt;/a&gt;编写支持迭代器协议的Python类&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;无限迭代&lt;/strong&gt;&lt;br&gt;实现一个可以通过&lt;strong&gt;for-in&lt;/strong&gt;循环迭代的类&lt;strong&gt;Repeater&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="python tricks" scheme="http://yoursite.com/categories/python-tricks/"/>
    
      <category term="python进阶" scheme="http://yoursite.com/categories/python-tricks/python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="python中的迭代器" scheme="http://yoursite.com/tags/python%E4%B8%AD%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>python中的上下文管理器和with语句</title>
    <link href="http://yoursite.com/2020/03/09/pytricks-2/"/>
    <id>http://yoursite.com/2020/03/09/pytricks-2/</id>
    <published>2020-03-09T08:42:37.000Z</published>
    <updated>2020-03-09T08:47:19.788Z</updated>
    
    <content type="html"><![CDATA[<p><strong>引入：</strong><br>打开一个文件并写入‘hello, world’，可用代码一和代码二实现：<br>代码一：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"hello.txt"</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f.write(<span class="string">'hello, world'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><br>代码二：<br><strong>with</strong>语句通过在上下文管理器中封装<strong>try…finally</strong>语句的标准用法来简化异常处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'hello.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(<span class="string">'hello, world'</span>)</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><strong>如何在自定义的对象（类和函数）中支持with?</strong><br>自定义对象实现上下文管理器即可</p><p>上下文管理器是一个简单的协议（接口），自定义的对象需要遵循这个接口来支持<strong>with</strong>语句。具体做法，向自定义对象中添加<strong>enter</strong>和<strong>exit</strong>方法，Python将在资源管理的适当时间调用这两种方法。</p><p>实际代码，内置open()函数上下文管理器的一个简单实现<br><strong>基于类实现</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ManagedFile</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">self.name = name</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.file = open(self.name, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">return</span> self.file</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line"><span class="keyword">if</span> self.file:</span><br><span class="line">self.file.close()</span><br></pre></td></tr></table></figure><br>其中ManagedFile类也遵循上下文管理器协议，与原open()一样也支持with语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> ManagedFile(<span class="string">'hello.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(<span class="string">'hello, world'</span>)</span><br></pre></td></tr></table></figure><p>进入with语句上下文，Python调用<strong>enter</strong>获取资源，离开with语句上下文，Python调用<strong>exit</strong>释放资源。</p><p><strong>基于生成器实现</strong><br>利用标准库<strong>contextlib</strong>模块的<strong>contextmanager</strong>装饰器重写之前的<strong>ManagedFile</strong>上下文管理器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">managed_file</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f = open(name, <span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">yield</span> f</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> managed_file(<span class="string">'hello.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(<span class="string">'hello, world'</span>)</span><br></pre></td></tr></table></figure><p><strong>小结：with</strong>语句有助于简化一些通用资源管理模式，抽象出其中的功能，将其分解并重用</p><p><strong>参考书籍：Python Tricks</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;引入：&lt;/strong&gt;&lt;br&gt;打开一个文件并写入‘hello, world’，可用代码一和代码二实现：&lt;br&gt;代码一：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f = open(&lt;span class=&quot;string&quot;&gt;&quot;hello.txt&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f.write(&lt;span class=&quot;string&quot;&gt;&#39;hello, world&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;代码二：&lt;br&gt;&lt;strong&gt;with&lt;/strong&gt;语句通过在上下文管理器中封装&lt;strong&gt;try…finally&lt;/strong&gt;语句的标准用法来简化异常处理&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;hello.txt&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	f.write(&lt;span class=&quot;string&quot;&gt;&#39;hello, world&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="python tricks" scheme="http://yoursite.com/categories/python-tricks/"/>
    
      <category term="python进阶" scheme="http://yoursite.com/categories/python-tricks/python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="python中的上下文管理器和with语句" scheme="http://yoursite.com/tags/python%E4%B8%AD%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8%E5%92%8Cwith%E8%AF%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>python中的浅拷贝和深拷贝</title>
    <link href="http://yoursite.com/2020/03/08/pytricks-1/"/>
    <id>http://yoursite.com/2020/03/08/pytricks-1/</id>
    <published>2020-03-08T10:43:42.000Z</published>
    <updated>2020-03-09T08:47:06.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="为什么需要拷贝（克隆）对象？"><a href="#为什么需要拷贝（克隆）对象？" class="headerlink" title="为什么需要拷贝（克隆）对象？"></a><strong>为什么需要拷贝（克隆）对象？</strong></h4><p>Python中的赋值语句不会创建对象（包括不可变对象）的副本，而只是将名称绑定到对象上。当我们需要用到对象的副本，以便修改副本时不会改动主体，就需要拷贝对象。</p><h4 id="制作浅副本"><a href="#制作浅副本" class="headerlink" title="制作浅副本"></a>制作浅副本</h4></blockquote><p><strong>用list()工厂函数制作浅副本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_2 = list(list_1)  <span class="comment">#浅副本</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_2</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><p>可以看到<strong>list_1</strong>和<strong>list_2</strong>具有相同的内容<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1.append([<span class="string">'new sublist'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="string">'new sublist'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_2</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><br>向<strong>list_1</strong>添加新列表的改动并不影响副本<strong>list_2</strong>，可见副本<strong>list_2</strong>与原对象<strong>list_1</strong>互相独立。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">'X'</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="string">'new sublist'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_2</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">'X'</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><p>改动<strong>list_1</strong>中的子对象<strong>list_2</strong>也会受到影响，浅副本和原对象并不完全独立，这是因为<strong>两个列表共享相同的子对象</strong>。<strong>list_2</strong>仍然有<strong>list_1</strong>子对象的引用，并且这些子对象没有复制，只是在<strong>list_2</strong>中再次引用。</p><p><strong>tips</strong>：也可以使用<strong>copy.copy()</strong>函数创建对象的浅副本，但是使用<strong>list，dict和set</strong>这样的工厂函数创建浅副本更具Python的特色。</p><blockquote><h4 id="制作深副本"><a href="#制作深副本" class="headerlink" title="制作深副本"></a>制作深副本</h4><p>用Python标准库中的<strong>copy</strong>模块中定义的deepcopy()函数制作深副本</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_3 = copy.deepcopy(list_1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_3</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><p>同样的可以看到<strong>list_1</strong>和<strong>list_3</strong>具有相同的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_1</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">'X'</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_3</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure><p>改动原对象<strong>list_1</strong>的子对象不会影响深副本<strong>list_3</strong>。可见原对象和深副本是完全独立的，<strong>list_3</strong>复制过程中递归复制了<strong>list_1</strong>，包括<strong>list_1</strong>的所有子对象。</p><blockquote><h4 id="浅拷贝和深拷贝的区别"><a href="#浅拷贝和深拷贝的区别" class="headerlink" title="浅拷贝和深拷贝的区别"></a>浅拷贝和深拷贝的区别</h4><p><strong>浅拷贝</strong>：构建一个新的容器对象，然后填充原对象中子对象的引用。本质上浅复制只执行一层，复制过程不会递归，因此不会创建子对象的副本。</p></blockquote><p><strong>深拷贝</strong>：递归复制，首先构造一个新的容器对象，然后递归地填充原始对象中子对象的副本。这种方式会遍历整个对象树，以此来创建原对象及其所有子项的完全独立的副本。</p><hr><p><strong>参考书籍：Python Tricks</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;为什么需要拷贝（克隆）对象？&quot;&gt;&lt;a href=&quot;#为什么需要拷贝（克隆）对象？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要拷贝（克隆）对象？&quot;&gt;&lt;/a&gt;&lt;strong&gt;为什么需要拷贝（克隆）对象？&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Python中的赋值语句不会创建对象（包括不可变对象）的副本，而只是将名称绑定到对象上。当我们需要用到对象的副本，以便修改副本时不会改动主体，就需要拷贝对象。&lt;/p&gt;
&lt;h4 id=&quot;制作浅副本&quot;&gt;&lt;a href=&quot;#制作浅副本&quot; class=&quot;headerlink&quot; title=&quot;制作浅副本&quot;&gt;&lt;/a&gt;制作浅副本&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;用list()工厂函数制作浅副本&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list_1 = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list_2 = list(list_1)  &lt;span class=&quot;comment&quot;&gt;#浅副本&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list_2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;], [&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到&lt;strong&gt;list_1&lt;/strong&gt;和&lt;strong&gt;list_2&lt;/strong&gt;具有相同的内容&lt;br&gt;
    
    </summary>
    
    
      <category term="python tricks" scheme="http://yoursite.com/categories/python-tricks/"/>
    
      <category term="python进阶" scheme="http://yoursite.com/categories/python-tricks/python%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="python中的浅拷贝和深拷贝" scheme="http://yoursite.com/tags/python%E4%B8%AD%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/07/hello-world/"/>
    <id>http://yoursite.com/2020/03/07/hello-world/</id>
    <published>2020-03-07T10:34:47.108Z</published>
    <updated>2020-03-08T13:17:41.685Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a><br><a id="more"></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
